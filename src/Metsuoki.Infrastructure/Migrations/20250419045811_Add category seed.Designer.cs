// <auto-generated />
using System;
using Metsuoki.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Metsuoki.Infrastructure.Migrations
{
    [DbContext(typeof(MetsuokiDbContext))]
    [Migration("20250419045811_Add category seed")]
    partial class Addcategoryseed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Metsuoki.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("UserId");

                    b.HasIndex("CartId", "ProductVariantId")
                        .IsUnique();

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000000"),
                            Description = "Категории одежды для мужчин",
                            Name = "Мужчинам"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000000"),
                            Description = "Категории одежды для женщин",
                            Name = "Женщинам"
                        },
                        new
                        {
                            Id = new Guid("10000000-0001-0000-0000-000000000000"),
                            Name = "Брюки",
                            ParentCategoryId = new Guid("10000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0002-0000-0000-000000000000"),
                            Name = "Верхняя одежда",
                            ParentCategoryId = new Guid("10000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0002-0000-0000-000000000001"),
                            Name = "Дубленки мужские",
                            ParentCategoryId = new Guid("10000000-0002-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0002-0000-0000-000000000002"),
                            Name = "Жилеты",
                            ParentCategoryId = new Guid("10000000-0002-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0002-0000-0000-000000000003"),
                            Name = "Пальто",
                            ParentCategoryId = new Guid("10000000-0002-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0002-0000-0000-000000000004"),
                            Name = "Куртки",
                            ParentCategoryId = new Guid("10000000-0002-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0002-0000-0000-000000000005"),
                            Name = "Плащи",
                            ParentCategoryId = new Guid("10000000-0002-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0003-0000-0000-000000000000"),
                            Name = "Джинсы",
                            ParentCategoryId = new Guid("10000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0004-0000-0000-000000000000"),
                            Name = "Домашняя одежда",
                            ParentCategoryId = new Guid("10000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0004-0000-0000-000000000001"),
                            Name = "Брюки и шорты домашние",
                            ParentCategoryId = new Guid("10000000-0004-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0004-0000-0000-000000000002"),
                            Name = "Кигуруми и толстовки",
                            ParentCategoryId = new Guid("10000000-0004-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0004-0000-0000-000000000003"),
                            Name = "Комплекты домашние",
                            ParentCategoryId = new Guid("10000000-0004-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0004-0000-0000-000000000004"),
                            Name = "Пижамы",
                            ParentCategoryId = new Guid("10000000-0004-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0004-0000-0000-000000000005"),
                            Name = "Футболки домашние",
                            ParentCategoryId = new Guid("10000000-0004-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0004-0000-0000-000000000006"),
                            Name = "Халаты",
                            ParentCategoryId = new Guid("10000000-0004-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0005-0000-0000-000000000000"),
                            Name = "Комбинезоны и полукомбинезоны",
                            ParentCategoryId = new Guid("10000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0006-0000-0000-000000000000"),
                            Name = "Комплекты одежды",
                            ParentCategoryId = new Guid("10000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0007-0000-0000-000000000000"),
                            Name = "Костюмы,  жилекти и пиджаки",
                            ParentCategoryId = new Guid("10000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0008-0000-0000-000000000000"),
                            Name = "Одежда для спорта",
                            ParentCategoryId = new Guid("10000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0008-0000-0000-000000000001"),
                            Name = "Спортивные костюмы",
                            ParentCategoryId = new Guid("10000000-0008-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0008-0000-0000-000000000002"),
                            Name = "Спортивные брюки",
                            ParentCategoryId = new Guid("10000000-0008-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0008-0000-0000-000000000003"),
                            Name = "Спортивные куртки",
                            ParentCategoryId = new Guid("10000000-0008-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0008-0000-0000-000000000004"),
                            Name = "Спортивные шорты",
                            ParentCategoryId = new Guid("10000000-0008-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0008-0000-0000-000000000005"),
                            Name = "Спортивные майки и футболки",
                            ParentCategoryId = new Guid("10000000-0008-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0008-0000-0000-000000000006"),
                            Name = "Спортивные носки и гольфы",
                            ParentCategoryId = new Guid("10000000-0008-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0008-0000-0000-000000000007"),
                            Name = "Спортивные толстовки",
                            ParentCategoryId = new Guid("10000000-0008-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0008-0000-0000-000000000008"),
                            Name = "Спортивные одежда для плавания",
                            ParentCategoryId = new Guid("10000000-0008-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0009-0000-0000-000000000000"),
                            Name = "Нижнее белье",
                            ParentCategoryId = new Guid("10000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0009-0000-0000-000000000001"),
                            Name = "Комплекты нижнего мужского белья",
                            ParentCategoryId = new Guid("10000000-0009-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0009-0000-0000-000000000002"),
                            Name = "Кальсоны и колготки",
                            ParentCategoryId = new Guid("10000000-0009-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0009-0000-0000-000000000003"),
                            Name = "Комплекты Корректирующее белье и боди",
                            ParentCategoryId = new Guid("10000000-0009-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("10000000-0009-0000-0000-000000000004"),
                            Name = "Трусы",
                            ParentCategoryId = new Guid("10000000-0009-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid>("DesignerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DesignerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Products.ProductDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId", "StartDate", "EndDate");

                    b.ToTable("ProductDiscount");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Products.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Products.ProductVariants.ColorReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HexCode")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("ColorReference");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Products.ProductVariants.ProductVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("PriceOverride")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("SizeId");

                    b.HasIndex("ProductId", "ColorId", "SizeId")
                        .IsUnique();

                    b.ToTable("ProductVariant");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Products.ProductVariants.SizeReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("SizeReference");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Metsuoki.Domain.Identity.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Metsuoki.Domain.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Cart", b =>
                {
                    b.HasOne("Metsuoki.Domain.Identity.User", "User")
                        .WithOne()
                        .HasForeignKey("Metsuoki.Domain.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("Metsuoki.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metsuoki.Domain.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Metsuoki.Domain.Entities.Products.ProductVariants.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Metsuoki.Domain.Identity.User", null)
                        .WithMany("CartItems")
                        .HasForeignKey("UserId");

                    b.Navigation("Cart");

                    b.Navigation("Product");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Category", b =>
                {
                    b.HasOne("Metsuoki.Domain.Entities.Category", "ParentCategory")
                        .WithMany("Subcategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Order", b =>
                {
                    b.HasOne("Metsuoki.Domain.Identity.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Metsuoki.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metsuoki.Domain.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Metsuoki.Domain.Entities.Products.ProductVariants.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Products.Product", b =>
                {
                    b.HasOne("Metsuoki.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Metsuoki.Domain.Identity.User", "Designer")
                        .WithMany("Products")
                        .HasForeignKey("DesignerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Designer");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Products.ProductDiscount", b =>
                {
                    b.HasOne("Metsuoki.Domain.Entities.Products.Product", "Product")
                        .WithMany("Discounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Products.ProductImage", b =>
                {
                    b.HasOne("Metsuoki.Domain.Entities.Products.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Products.ProductVariants.ProductVariant", b =>
                {
                    b.HasOne("Metsuoki.Domain.Entities.Products.ProductVariants.ColorReference", "Color")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Metsuoki.Domain.Entities.Products.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Metsuoki.Domain.Entities.Products.ProductVariants.SizeReference", "Size")
                        .WithMany("ProductVariants")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Review", b =>
                {
                    b.HasOne("Metsuoki.Domain.Identity.User", "Author")
                        .WithMany("Reviews")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Metsuoki.Domain.Entities.Products.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Metsuoki.Domain.Identity.RefreshToken", b =>
                {
                    b.HasOne("Metsuoki.Domain.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Metsuoki.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Metsuoki.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metsuoki.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Metsuoki.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Products.Product", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("Images");

                    b.Navigation("Reviews");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Products.ProductVariants.ColorReference", b =>
                {
                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("Metsuoki.Domain.Entities.Products.ProductVariants.SizeReference", b =>
                {
                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("Metsuoki.Domain.Identity.User", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
